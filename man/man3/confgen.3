.TH CONFGEN 3 "2024\-03\-22"
.SH NAME
.B Confgen API
\- the
.I Lua API
of the
.I Confgen
template engine.

.SH SYNOPSIS
The
.B Confgen API
is exposes 2 main objects: the global
.IR cg ,
providing the main interface to confgen and the global
.IR tmpl ,
only inside templates for template-specific operations.

.SH DESCRIPTION

All relative paths handled by the API are treated as local to the directory the
.I confgenfile
is in.

The fields on the globals are as follows:

.TP
.B cg.opt
This field is where the user is encouraged to define shared vaules to be used across templates.
The value is pre-initialized to an
.IR empty\ table .

Example:
.B cg.opt.font = \(dqMyFont\(dq

.TP
.B cg.addString(outpath, data)
Add a configuration file
.I outpath
to the file list, its content being defined by
.IR data .

Example:
.B cg.addString(\(dq.config/example\(dq, \(dqkey = value\(dq)

.TP
.B cg.addPath(path[, targpath])
Recursively add all files in the
.I target directory
to the file list.
If
.I targpath
is provided, it will be used as the prefix directory in the file list, otherwise
.I path
is used.

Example:
.B cg.addPath(\(dq.config\(dq)

.TP
.B cg.addFile(inpath[, outpath])
Adds a single file, located at
.I inpath
to the file list under the name
.IR outpath .
If
.I outpath
is omitted, it will use the same value as
.IR inpath .

Example:
.B cg.addFile(\(dq.gtkrc-2.0\(dq)

.TP
.B cg.doTemplate(source)
Load some template code and immediately evaluate it, returning the resulting data as a string.

Example:
.B local my_data = cg.doTemplate(\(dq<% 2 * 2 %>\(dq) -- \(dq4\(dq

.TP
.B cg.onDone(callback)
Add a callback function to be ran when confgen finishes. The
.I callback
argument must be a Lua function. Confgen will call this function when it finishes. This function will
be provided a single argument:
.I true
if errors where encountered, or
.I false
if there were none. Multiple callbacks may be added.

This may be useful to, for example, run commands to update system state after a successful run as is
commonly required when using stateful tools such as
.IR gsettings .

ConfgenFS will never call callbacks registered with
.IR onDone .

Example:
.B cg.onDone(function(errors) print("Had errors: " .. tostring(errors)) end)

.TP
.B cg.toJSON(value[, pretty])
Convert an arbitrary lua value to JSON and return that as a string. The JSON will be minified by
default unless
.IR pretty \ is \ true .

Unrepresentable Lua values such as
.I functions
will be serialized as
.IR null .

Example:
.B local json = cg.toJSON({ x = \(dqy\(dq }) -- '{\(dqx\(dq: \(dqy\(dq}'

.TP
.B tmpl
The global value
.I tmpl
will be set to a seperate value in every template. It's a data structure that collects the final
output of the template and also stores some properties of the final, generated code.

A template is generated by pushing data to it, which is appended to the output. See 
.BR confgen-template (5).

.TP
.B tmpl:pushLitIdx(n)
This function is called internally in order to push literal code defined in the template source to
the output buffer. Do not call this manually unless you want broken output!

Example:
.B NO!

.TP
.B tmpl:pushValue(value)
Push a Lua value to the output buffer. The values will be converted to strings the same as Lua's
.I tostring
would. This function is rarely called manually and is instead what
.I Confgen
generates for
.IR Lua\ expression\ blocks .

Example:
.B tmpl:pushValue(2 + 2) -- equivalent to: <% 2 + 2 %>

.TP
.B tmpl:setPostProcessor(postprocessor)
Sets the
.I postprocessor function
for this template. The given function will be called by
.I Confgen
after the template has been fully generated with the entire 
.I output buffer
as an
.IR argument .
It may do any arbitrary transformations on the data and 
.I return
it as a
.IR string ,
which confgen will emit in place of the original output buffer.

Example:
.B tmpl:setPostProcessor(function(data) return string.upper(data) end) -- convert all characters to upper case

.TP
.B tmpl:setMode(filemode)
Set the file mode of the output file. If this is never called, output files will have the mode
.IR 644 .
This function may either be called with an integer to directly interpret as a file mode or a string
which will be parsed in
.I octal
to such an integer. Be careful not to mistakenly call it with a decimal number \-
.B tmpl:setMode(755) is INVALID!

Example:
.B tmpl:setMode("755") -- Make file executable

.SH SEE ALSO
.BR confgen (1),
.BR confgen.lua (5),
.BR confgen-template (5),
.BR confgenfs (1).
